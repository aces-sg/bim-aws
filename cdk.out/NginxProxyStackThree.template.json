{
 "Resources": {
  "NginxVpcFE1B165E": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "CidrBlock": "10.0.0.0/16",
    "EnableDnsHostnames": true,
    "EnableDnsSupport": true,
    "InstanceTenancy": "default",
    "Tags": [
     {
      "Key": "Name",
      "Value": "NginxProxyStackThree/NginxVpc"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxVpc/Resource"
   }
  },
  "NginxVpcPublicSubnet1SubnetFD3CAA71": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "VpcId": {
     "Ref": "NginxVpcFE1B165E"
    },
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.0.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "NginxProxyStackThree/NginxVpc/PublicSubnet1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxVpc/PublicSubnet1/Subnet"
   }
  },
  "NginxVpcPublicSubnet1RouteTableDE29045F": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "VpcId": {
     "Ref": "NginxVpcFE1B165E"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "NginxProxyStackThree/NginxVpc/PublicSubnet1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxVpc/PublicSubnet1/RouteTable"
   }
  },
  "NginxVpcPublicSubnet1RouteTableAssociation8988997E": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "NginxVpcPublicSubnet1RouteTableDE29045F"
    },
    "SubnetId": {
     "Ref": "NginxVpcPublicSubnet1SubnetFD3CAA71"
    }
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxVpc/PublicSubnet1/RouteTableAssociation"
   }
  },
  "NginxVpcPublicSubnet1DefaultRoute8E2C4B50": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "RouteTableId": {
     "Ref": "NginxVpcPublicSubnet1RouteTableDE29045F"
    },
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "NginxVpcIGW5BF51E51"
    }
   },
   "DependsOn": [
    "NginxVpcVPCGWA22A08F1"
   ],
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxVpc/PublicSubnet1/DefaultRoute"
   }
  },
  "NginxVpcPublicSubnet2Subnet070965F9": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "VpcId": {
     "Ref": "NginxVpcFE1B165E"
    },
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.64.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "NginxProxyStackThree/NginxVpc/PublicSubnet2"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxVpc/PublicSubnet2/Subnet"
   }
  },
  "NginxVpcPublicSubnet2RouteTableD2BFAC61": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "VpcId": {
     "Ref": "NginxVpcFE1B165E"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "NginxProxyStackThree/NginxVpc/PublicSubnet2"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxVpc/PublicSubnet2/RouteTable"
   }
  },
  "NginxVpcPublicSubnet2RouteTableAssociationE6BE9BCB": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "NginxVpcPublicSubnet2RouteTableD2BFAC61"
    },
    "SubnetId": {
     "Ref": "NginxVpcPublicSubnet2Subnet070965F9"
    }
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxVpc/PublicSubnet2/RouteTableAssociation"
   }
  },
  "NginxVpcPublicSubnet2DefaultRouteFFF221F2": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "RouteTableId": {
     "Ref": "NginxVpcPublicSubnet2RouteTableD2BFAC61"
    },
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "NginxVpcIGW5BF51E51"
    }
   },
   "DependsOn": [
    "NginxVpcVPCGWA22A08F1"
   ],
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxVpc/PublicSubnet2/DefaultRoute"
   }
  },
  "NginxVpcIsolatedSubnet1Subnet9CA57C33": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "VpcId": {
     "Ref": "NginxVpcFE1B165E"
    },
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.128.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Isolated"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Isolated"
     },
     {
      "Key": "Name",
      "Value": "NginxProxyStackThree/NginxVpc/IsolatedSubnet1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxVpc/IsolatedSubnet1/Subnet"
   }
  },
  "NginxVpcIsolatedSubnet1RouteTable7BA216E2": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "VpcId": {
     "Ref": "NginxVpcFE1B165E"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "NginxProxyStackThree/NginxVpc/IsolatedSubnet1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxVpc/IsolatedSubnet1/RouteTable"
   }
  },
  "NginxVpcIsolatedSubnet1RouteTableAssociationB974B368": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "NginxVpcIsolatedSubnet1RouteTable7BA216E2"
    },
    "SubnetId": {
     "Ref": "NginxVpcIsolatedSubnet1Subnet9CA57C33"
    }
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxVpc/IsolatedSubnet1/RouteTableAssociation"
   }
  },
  "NginxVpcIsolatedSubnet2SubnetB99DDB07": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "VpcId": {
     "Ref": "NginxVpcFE1B165E"
    },
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.192.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Isolated"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Isolated"
     },
     {
      "Key": "Name",
      "Value": "NginxProxyStackThree/NginxVpc/IsolatedSubnet2"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxVpc/IsolatedSubnet2/Subnet"
   }
  },
  "NginxVpcIsolatedSubnet2RouteTable5365FB87": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "VpcId": {
     "Ref": "NginxVpcFE1B165E"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "NginxProxyStackThree/NginxVpc/IsolatedSubnet2"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxVpc/IsolatedSubnet2/RouteTable"
   }
  },
  "NginxVpcIsolatedSubnet2RouteTableAssociationD8F91B56": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "NginxVpcIsolatedSubnet2RouteTable5365FB87"
    },
    "SubnetId": {
     "Ref": "NginxVpcIsolatedSubnet2SubnetB99DDB07"
    }
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxVpc/IsolatedSubnet2/RouteTableAssociation"
   }
  },
  "NginxVpcIGW5BF51E51": {
   "Type": "AWS::EC2::InternetGateway",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "NginxProxyStackThree/NginxVpc"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxVpc/IGW"
   }
  },
  "NginxVpcVPCGWA22A08F1": {
   "Type": "AWS::EC2::VPCGatewayAttachment",
   "Properties": {
    "VpcId": {
     "Ref": "NginxVpcFE1B165E"
    },
    "InternetGatewayId": {
     "Ref": "NginxVpcIGW5BF51E51"
    }
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxVpc/VPCGW"
   }
  },
  "AlbSecurityGroup86A59E99": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Security group for ALB",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "SecurityGroupIngress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow HTTP traffic",
      "FromPort": 80,
      "IpProtocol": "tcp",
      "ToPort": 80
     },
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow HTTPS traffic",
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     }
    ],
    "VpcId": {
     "Ref": "NginxVpcFE1B165E"
    }
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/AlbSecurityGroup/Resource"
   }
  },
  "NginxSecurityGroupFD5E8C12": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Security group for Nginx instances",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "SecurityGroupIngress": [
     {
      "Description": "Allow HTTP traffic from ALB",
      "FromPort": 80,
      "IpProtocol": "tcp",
      "SourceSecurityGroupId": {
       "Fn::GetAtt": [
        "AlbSecurityGroup86A59E99",
        "GroupId"
       ]
      },
      "ToPort": 80
     },
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow SSH access",
      "FromPort": 22,
      "IpProtocol": "tcp",
      "ToPort": 22
     }
    ],
    "VpcId": {
     "Ref": "NginxVpcFE1B165E"
    }
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxSecurityGroup/Resource"
   }
  },
  "NginxSecurityGroupfromNginxProxyStackThreeAlbSecurityGroup376B0B0080BA886D7B": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "IpProtocol": "tcp",
    "Description": "Load balancer to target",
    "FromPort": 80,
    "GroupId": {
     "Fn::GetAtt": [
      "NginxSecurityGroupFD5E8C12",
      "GroupId"
     ]
    },
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "AlbSecurityGroup86A59E99",
      "GroupId"
     ]
    },
    "ToPort": 80
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxSecurityGroup/from NginxProxyStackThreeAlbSecurityGroup376B0B00:80"
   }
  },
  "NginxAlb10923154": {
   "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
   "Properties": {
    "LoadBalancerAttributes": [
     {
      "Key": "deletion_protection.enabled",
      "Value": "false"
     }
    ],
    "Scheme": "internet-facing",
    "SecurityGroups": [
     {
      "Fn::GetAtt": [
       "AlbSecurityGroup86A59E99",
       "GroupId"
      ]
     }
    ],
    "Subnets": [
     {
      "Ref": "NginxVpcPublicSubnet1SubnetFD3CAA71"
     },
     {
      "Ref": "NginxVpcPublicSubnet2Subnet070965F9"
     }
    ],
    "Type": "application"
   },
   "DependsOn": [
    "NginxVpcPublicSubnet1DefaultRoute8E2C4B50",
    "NginxVpcPublicSubnet1RouteTableAssociation8988997E",
    "NginxVpcPublicSubnet2DefaultRouteFFF221F2",
    "NginxVpcPublicSubnet2RouteTableAssociationE6BE9BCB"
   ],
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxAlb/Resource"
   }
  },
  "NginxAlbRedirect80To4438A980C0E": {
   "Type": "AWS::ElasticLoadBalancingV2::Listener",
   "Properties": {
    "DefaultActions": [
     {
      "RedirectConfig": {
       "Port": "443",
       "Protocol": "HTTPS",
       "StatusCode": "HTTP_301"
      },
      "Type": "redirect"
     }
    ],
    "LoadBalancerArn": {
     "Ref": "NginxAlb10923154"
    },
    "Port": 80,
    "Protocol": "HTTP"
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxAlb/Redirect80To443/Resource"
   }
  },
  "NginxAlbHttpsListenerDE052181": {
   "Type": "AWS::ElasticLoadBalancingV2::Listener",
   "Properties": {
    "DefaultActions": [
     {
      "TargetGroupArn": {
       "Ref": "NginxTargetGroup6C5FCDE3"
      },
      "Type": "forward"
     }
    ],
    "LoadBalancerArn": {
     "Ref": "NginxAlb10923154"
    },
    "Certificates": [
     {
      "CertificateArn": {
       "Ref": "NginxCertificate26E222C0"
      }
     }
    ],
    "Port": 443,
    "Protocol": "HTTPS"
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxAlb/HttpsListener/Resource"
   }
  },
  "NginxAlbHttpsListenerDefaultCertificates1A5074179": {
   "Type": "AWS::ElasticLoadBalancingV2::ListenerCertificate",
   "Properties": {
    "Certificates": [
     {
      "CertificateArn": {
       "Ref": "NginxCertificateBimeco092251A9"
      }
     }
    ],
    "ListenerArn": {
     "Ref": "NginxAlbHttpsListenerDE052181"
    }
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxAlb/HttpsListener/DefaultCertificates1/Resource"
   }
  },
  "NginxCertificate26E222C0": {
   "Type": "AWS::CertificateManager::Certificate",
   "Properties": {
    "DomainName": "bim.com.sg",
    "SubjectAlternativeNames": [
     "*.bim.com.sg"
    ],
    "ValidationMethod": "DNS"
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxCertificate/Resource"
   }
  },
  "NginxCertificateBimeco092251A9": {
   "Type": "AWS::CertificateManager::Certificate",
   "Properties": {
    "DomainName": "bimeco.io",
    "SubjectAlternativeNames": [
     "*.bimeco.io"
    ],
    "ValidationMethod": "DNS"
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxCertificateBimeco/Resource"
   }
  },
  "NginxLaunchTemplate4364E9F8": {
   "Type": "AWS::EC2::LaunchTemplate",
   "Properties": {
    "LaunchTemplateData": {
     "ImageId": "ami-0672fd5b9210aa093",
     "InstanceType": "t2.micro",
     "KeyName": "default-bim",
     "SecurityGroupIds": [
      {
       "Fn::GetAtt": [
        "NginxSecurityGroupFD5E8C12",
        "GroupId"
       ]
      }
     ],
     "TagSpecifications": [
      {
       "ResourceType": "instance",
       "Tags": [
        {
         "Key": "Name",
         "Value": "NginxProxyStackThree/NginxLaunchTemplate"
        }
       ]
      },
      {
       "ResourceType": "volume",
       "Tags": [
        {
         "Key": "Name",
         "Value": "NginxProxyStackThree/NginxLaunchTemplate"
        }
       ]
      }
     ],
     "UserData": {
      "Fn::Base64": "#!/bin/bash\nsudo apt-get update -y\nsudo apt-get install -y nginx\nsudo bash -c 'cat > /etc/nginx/sites-available/default <<EOF\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n    server_name _;\n\n    location /blog/_next {\n        proxy_pass https://blog.bimeco.io/blog/_next;\n        proxy_set_header Host blog.bimeco.io;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_ssl_server_name on;\n    }\n        \n    location /blog {\n        proxy_pass https://blog.bimeco.io/blog;\n        proxy_set_header Host blog.bimeco.io;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_ssl_server_name on;\n    }\n        \n    location /career/_next {\n        proxy_pass https://jobs.bimeco.io/career/_next;\n        proxy_set_header Host jobs.bimeco.io;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_ssl_server_name on;\n        proxy_redirect https://jobs.bimeco.io/career/ /jobs/;\n        proxy_connect_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n\n    location /career {\n        proxy_pass https://jobs.bimeco.io/career;\n        proxy_set_header Host jobs.bimeco.io;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_ssl_server_name on;\n        proxy_connect_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n\n    location / {\n        proxy_pass https://static.bim.com.sg;\n        proxy_set_header Host static.bim.com.sg;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_ssl_server_name on;\n    }\n\n    location /health {\n        access_log off;\n        return 200 'Healthy';\n    }\n\n    error_page 404 /404.html;\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n        root /usr/share/nginx/html;\n    }\n}\nEOF'\nsudo nginx -t\nsudo systemctl restart nginx\nsudo systemctl enable nginx"
     }
    },
    "TagSpecifications": [
     {
      "ResourceType": "launch-template",
      "Tags": [
       {
        "Key": "Name",
        "Value": "NginxProxyStackThree/NginxLaunchTemplate"
       }
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxLaunchTemplate/Resource"
   }
  },
  "NginxAsgASG6E998B71": {
   "Type": "AWS::AutoScaling::AutoScalingGroup",
   "Properties": {
    "MaxSize": "4",
    "MinSize": "3",
    "HealthCheckGracePeriod": 1800,
    "HealthCheckType": "ELB",
    "LaunchTemplate": {
     "LaunchTemplateId": {
      "Ref": "NginxLaunchTemplate4364E9F8"
     },
     "Version": {
      "Fn::GetAtt": [
       "NginxLaunchTemplate4364E9F8",
       "LatestVersionNumber"
      ]
     }
    },
    "TargetGroupARNs": [
     {
      "Ref": "NginxTargetGroup6C5FCDE3"
     }
    ],
    "VPCZoneIdentifier": [
     {
      "Ref": "NginxVpcPublicSubnet1SubnetFD3CAA71"
     },
     {
      "Ref": "NginxVpcPublicSubnet2Subnet070965F9"
     }
    ]
   },
   "UpdatePolicy": {
    "AutoScalingScheduledAction": {
     "IgnoreUnmodifiedGroupSizeProperties": true
    }
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxAsg/ASG"
   }
  },
  "NginxTargetGroup6C5FCDE3": {
   "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
   "Properties": {
    "HealthCheckPath": "/health",
    "Matcher": {
     "HttpCode": "200-399"
    },
    "Port": 80,
    "Protocol": "HTTP",
    "TargetGroupAttributes": [
     {
      "Key": "stickiness.enabled",
      "Value": "false"
     }
    ],
    "TargetType": "instance",
    "VpcId": {
     "Ref": "NginxVpcFE1B165E"
    }
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/NginxTargetGroup/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/32RQYvCMBCFf4v3mFXZw15dDyIIK1a8LtNxrNE0KclEkdL/vrFWm5VloZB537y8ZNKJfB/L0QAufoi701CrXNYZA55ERN814UTW2wrFbG+2q5lYhVwrzEJuiG+sr9Y2MG0g19Tznk29t6iAlTVPs1g5dQamPmNhmFys55Fe4Nod2qkpx2sdSjIsMsLgFF/nzoaqPe5fsDCFI+/FEoLBw4bKSsfIm+03aQRp8KxQW9jloMGgMsU5vsC0quLY7fWXsffZ9si1EalOfcozmc7zqP/oz8ix2t8gpdYUJ7s24Ir4Po8xE9kI7LeUYKAgJ+uX9EQ2AgJbj6DjjHHCKLK7eKa/sqYRa/I2OGzDvgJX4f7vO9oIY3ckj/7tPP6Q8RsNjl6poQuGVUlyfV9/ANiw4nV0AgAA"
   },
   "Metadata": {
    "aws:cdk:path": "NginxProxyStackThree/CDKMetadata/Default"
   }
  }
 },
 "Outputs": {
  "LoadBalancerDNS": {
   "Description": "DNS name of the load balancer",
   "Value": {
    "Fn::Join": [
     "",
     [
      "http://",
      {
       "Fn::GetAtt": [
        "NginxAlb10923154",
        "DNSName"
       ]
      }
     ]
    ]
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}